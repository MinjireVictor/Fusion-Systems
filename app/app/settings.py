"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 4.0.10.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
from datetime import timedelta

import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-kutm#q4$thg3q&**fn0^9%&8o(^l+ewxrtuho)qoyh8mjpz#yl'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*'] 

# Review Analysis Settings
REVIEW_ANALYSIS_SETTINGS = {
    # Cron job settings
    'CRON_INTERVAL_MINUTES': int(os.environ.get('REVIEW_CRON_INTERVAL', 5)),  # 5 min for dev, 1440 for prod
    'MAX_AGE_HOURS': int(os.environ.get('REVIEW_MAX_AGE_HOURS', 24)),
    'BATCH_SIZE': int(os.environ.get('REVIEW_BATCH_SIZE', 50)),
    
    # Modal service settings
    'MODAL_APP_NAME': os.environ.get('MODAL_APP_NAME', 'hotel-review-analyzer'),
    'MODAL_FUNCTION_NAME': os.environ.get('MODAL_FUNCTION_NAME', 'analyze_reviews_batch'),
    'MODAL_TIMEOUT_SECONDS': int(os.environ.get('MODAL_TIMEOUT', 1800)),
    
    # Retry settings
    'MAX_RETRIES': int(os.environ.get('REVIEW_MAX_RETRIES', 3)),
    'RETRY_DELAY_SECONDS': int(os.environ.get('REVIEW_RETRY_DELAY', 60)),
    
    # Notification settings
    'ADMIN_EMAIL': os.environ.get('ADMIN_EMAIL', ''),
    'SEND_ERROR_NOTIFICATIONS': os.environ.get('SEND_ERROR_NOTIFICATIONS', 'False').lower() == 'true',
}


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'drf_spectacular',
    'core',
    'user',
    'rest_framework.authtoken',
    'recipe',
    'reviews',
    'corsheaders',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:3001",
    "http://127.0.0.1:3001",
    "http://localhost:8080",  # Common Vue.js port
    "http://127.0.0.1:8080",
    # Add your actual frontend URL here
]
CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_HEADERS = [
    # Standard headers
    'accept',
    'accept-encoding',
    'accept-language',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-requested-with',
    'cache-control',
    'pragma',
    
    # Django specific
    'x-csrftoken',
    
    # Tracing and monitoring headers
    'baggage',
    'sentry-trace',
    'traceparent',
    'tracestate',
    'x-trace-id',
    'x-span-id',
    
    # Custom application headers
    'x-idt',
    'x-correlation-id',
    'x-request-id',
    'x-session-id',
    'x-tenant-id',
    'x-api-key',
    'x-client-version',
    'xat',  # Added to fix CORS issue
    
    # Common proxy/load balancer headers
    'x-forwarded-for',
    'x-forwarded-proto',
    'x-real-ip',
    
    # Security headers
    'x-content-type-options',
    'x-frame-options',
]

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]


CORS_EXPOSE_HEADERS = [
    'content-type',
    'x-csrftoken',
    'x-total-count',
    'x-page-count',
]

# CORS preflight max age
CORS_PREFLIGHT_MAX_AGE = 86400

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'HOST': os.environ.get('DB_HOST'),
        'NAME': os.environ.get('DB_NAME'),
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASS'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Add this line:
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Also add this for media files (optional but recommended):
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL='core.User'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',  # For browsable API
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
}
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'reviews.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'reviews': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
        },
    },
}

# Environment-specific settings
DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'

if DEBUG:
    # Development settings
    REVIEW_ANALYSIS_SETTINGS['CRON_INTERVAL_MINUTES'] = 5
    ALLOWED_HOSTS = ['*']
else:
    # Production settings
    REVIEW_ANALYSIS_SETTINGS['CRON_INTERVAL_MINUTES'] = 1440  # 24 hours
    ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '').split(',')

# Cache settings (optional - for better performance)
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': os.environ.get('REDIS_URL', 'redis://127.0.0.1:6379/1'),
    }
} if os.environ.get('REDIS_URL') else {
    'default': {
        'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
    }
}

# Analytics settings
ANALYTICS_SETTINGS = {
    'CACHE_TIMEOUT': 300,  # 5 minutes
    'MAX_DAILY_SNAPSHOTS': 90,  # 3 months
    'MAX_WEEKLY_SNAPSHOTS': 104,  # 2 years
    'MAX_MONTHLY_SNAPSHOTS': 36,  # 3 years
}